<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd">
    <description>rabbitmq 连接服务配置</description>
    <!-- 连接配置 -->
    <rabbit:connection-factory  id="connectionFactory" host="${mq.host}" username="${mq.username}" password="${mq.password}" port="${mq.port}"  virtual-host="${mq.vhost}"/>
    <rabbit:admin connection-factory="connectionFactory"/>

    <!-- spring template声明-->
    <rabbit:template exchange="amqpExchange"  id="amqpTemplate" mandatory="true"  connection-factory="connectionFactory" message-converter="jsonMessageConverter" />

    <!-- 消息对象json转换类 -->
    <bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter" />  
	
    <!-- 消费队列 -->
    <!-- 申明一个消息队列Queue
    	 durable:是否持久化 
    	 exclusive: 仅创建者可以使用的私有队列，断开后自动删除
    	 auto_delete: 当所有消费客户端连接断开后，是否自动删除队列
      -->
    <!-- 接收验证码注册邮件队列 -->
	<rabbit:queue id="docking_send_mail_queue" name="docking_send_mail_queue" durable="true" auto-delete="false" exclusive="false" >
	    <rabbit:queue-arguments>
		    <!-- 设置死信交换机和队列 -->
	        <entry key="x-dead-letter-exchange" value="fanout_send_mail_DLX" />  
	        <entry key="x-dead-letter-routing-key" value="docking_send_mail_queue_DLX" />  
	    </rabbit:queue-arguments>
	</rabbit:queue>
	<!-- 接收验证码短信队列 -->
	<rabbit:queue id="docking_send_sms_queue" name="docking_send_sms_queue" durable="true" auto-delete="false" exclusive="false" >
	    <rabbit:queue-arguments>
		    <!-- 设置死信交换机和队列 -->
	        <entry key="x-dead-letter-exchange" value="fanout_send_sms_DLX" />  
	        <entry key="x-dead-letter-routing-key" value="docking_send_sms_queue_DLX" />  
	    </rabbit:queue-arguments>
	</rabbit:queue>
	<!-- 图片转文字 -->
	<rabbit:queue id="docking_image_conver_string"  name="docking_image_conver_string" durable="true" auto-delete="false" exclusive="false"/>
	
	
	<!-- 消费交换机 -->
	<!-- 绑定sso的短信验证码交换机 -->
	<rabbit:fanout-exchange  name="fanout_send_sms" durable="true" auto-delete="false">
	    <rabbit:bindings>
	        <rabbit:binding queue="docking_send_sms_queue"></rabbit:binding>
	    </rabbit:bindings>
	</rabbit:fanout-exchange>
	<!-- 绑定sso的邮箱验证码交换机 -->
	<rabbit:fanout-exchange  name="fanout_send_mail" durable="true" auto-delete="false">
	    <rabbit:bindings>
	        <rabbit:binding queue="docking_send_mail_queue"></rabbit:binding>
	    </rabbit:bindings>
	</rabbit:fanout-exchange>
	
	<!-- 绑定note的图片转文字交换机 -->
	<rabbit:direct-exchange  name="direct_image_conver_string_docking" durable="true" auto-delete="false">
	    <rabbit:bindings>
	        <rabbit:binding  queue="docking_image_conver_string"  key="key_image_conver_string_docking"></rabbit:binding>
	    </rabbit:bindings>
	</rabbit:direct-exchange>
	
	
	
	<!-- 死信交换机和队列 -->
	<!-- 短信 -->
	<rabbit:queue name="docking_send_sms_queue_DLX" />  
	<rabbit:direct-exchange name="fanout_send_sms_DLX"  
	    durable="false" auto-delete="false" >  
	    <rabbit:bindings>  
	        <rabbit:binding queue="docking_send_sms_queue_DLX" />  
	    </rabbit:bindings>  
	</rabbit:direct-exchange>  
	
	<!-- 邮箱 -->
	<rabbit:queue name="docking_send_mail_queue_DLX" />  
	<rabbit:direct-exchange name="fanout_send_mail_DLX"  
	    durable="false" auto-delete="false" >  
	    <rabbit:bindings>  
	        <rabbit:binding queue="docking_send_mail_queue_DLX" />  
	    </rabbit:bindings>  
	</rabbit:direct-exchange>  
	
	
	<!-- 监听配置
		 queues：监听的队列，多个的话用逗号（,）分隔 
		 ref：监听器
		 acknowledge:manual 手动设置回调
	 -->
	<rabbit:listener-container  connection-factory="connectionFactory"   acknowledge="manual">
	    <rabbit:listener  queues="docking_send_mail_queue"  ref="msgConsumerListenter"/>
	    <rabbit:listener queues="docking_send_sms_queue" ref="msgConsumerListenter"/>
	    <rabbit:listener queues="docking_image_conver_string" ref="msgConsumerListenter"/>
	</rabbit:listener-container>
	
	<!-- 设置一次只拉取1条消息进行处理 处理以后再拉取下一条消息 -->
	<rabbit:listener-container prefetch="1"  connection-factory="connectionFactory"   acknowledge="manual">
	    <rabbit:listener queues="docking_image_conver_string" ref="msgConsumerListenter"/>
	</rabbit:listener-container>
	
	<bean id="msgConsumerListenter" class="com.blogforum.docking.service.rabbitmq.consumer.MsgConsumerListenter">
	    <property name="msgHandler">
	        <map>
	            <entry key="sendSmsHandler" value-ref="sendSmsHandler"></entry>
	            <entry key="sendMailHandler" value-ref="sendMailHandler"></entry>
	            <entry key="imageToStringHandler" value-ref="imageToStringHandler"></entry>
	        </map>
	    </property>
	</bean>
	
	<bean id = "sendSmsHandler" class="com.blogforum.docking.service.rabbitmq.consumer.impl.SendSmsHandler">
	    <property name="smsSend" ref="verificationSmsSend"></property>
	</bean>
	<bean id= "sendMailHandler" class="com.blogforum.docking.service.rabbitmq.consumer.impl.SendMailHandler">
	    <property name="mailSend" ref="simpleMailSend"></property>
	</bean>
	
	<bean id="imageToStringHandler" class="com.blogforum.docking.service.rabbitmq.consumer.impl.ImageToStringHandler">
	    <property name="bdGeneralClient" ref="bdGeneralClient"></property>
	    <property name="noteBodyServerFacadeClient" ref="noteBodyServerFacadeClient"></property>
	</bean>
	 
</beans>